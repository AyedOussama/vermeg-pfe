import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse, AxiosError } from 'axios';
import { toast } from 'react-toastify';

// Interface pour la configuration personnalis√©e
interface CustomAxiosRequestConfig extends AxiosRequestConfig {
  _retry?: boolean;
}

// Cr√©er une instance Axios configur√©e
const apiClient: AxiosInstance = axios.create({
  baseURL: 'http://localhost:7000/api',  // Acc√®s direct √† l'API Gateway
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json',
  },
  withCredentials: true,
});

// Intercepteur de requ√™te
apiClient.interceptors.request.use(
  (config: CustomAxiosRequestConfig) => {
    // Les cookies sont envoy√©s automatiquement gr√¢ce √† withCredentials
    console.log(`üì§ ${config.method?.toUpperCase()} ${config.url}`);
    return config;
  },
  (error: AxiosError) => {
    console.error('‚ùå Request error:', error);
    return Promise.reject(error);
  }
);

// Intercepteur de r√©ponse
apiClient.interceptors.response.use(
  (response: AxiosResponse) => {
    console.log(`üì• Response ${response.status}:`, response.config.url);
    return response;
  },
  async (error: AxiosError) => {
    const originalRequest = error.config as CustomAxiosRequestConfig;

    // Si 401 et pas d√©j√† une tentative de refresh et pas sur login
    if (error.response?.status === 401 && 
        !originalRequest._retry && 
        !originalRequest.url?.includes('/auth/login')) {
      originalRequest._retry = true;

      try {
        // Tenter de rafra√Æchir le token
        await apiClient.post('/auth/refresh');
        // R√©essayer la requ√™te originale
        return apiClient(originalRequest);
      } catch (refreshError) {
        // Rediriger vers login si refresh √©choue
        window.location.href = '/login';
        return Promise.reject(refreshError);
      }
    }

    // Afficher les erreurs sauf pour validate
    if (!error.config?.url?.includes('/auth/validate')) {
      const message = (error.response?.data as any)?.message || 'Une erreur est survenue';
      toast.error(message);
    }

    return Promise.reject(error);
  }
);

export default apiClient;
